# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p5nl3OoTqBSJ8laqogwXbLbF9Q2wYx1F
"""

#Melakukan installasi library yang nantinya akan di Import
pip install tensorflow keras numpy mnist matplotlib

#melakukan import library
from tensorflow.python.keras import Sequential
from tensorflow.python.keras.layers import Dense, Conv2D, Flatten
from keras.datasets import mnist #Menyediakan sample data set
from keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np

#memasukkan data serta memisahkan menjadi data train dan data set
(X_train,y_train), (X_test, y_test) = mnist.load_data()

#mengambil bentuk gambar
print(X_train.shape)#60000 baris gambar 28x28 piksel dengan kedalaman = 1 yang menandakan gambar tersebut skala abu-abu (bilangan bulat 8 bit memberikan 256 kemungkinan nuansa abu-abu dari hitam ke putih)
print(X_test.shape)#10000 baris gambar 28x28 piksel dengan kedalaman = 1 yang menandakan gambar tersebut skala abu-abu (bilangan bulat 8 bit memberikan 256 kemungkinan nuansa abu-abu dari hitam ke putih)

#Lihat gambar pertama (pada indeks = 0) dalam data train yang ditetapkan sebagai array numpy, ini menunjukkan gambar sebagai serangkaian nilai piksel pada sumbu X
X_train[0]

#Sama seperti X dan ini merupakan sumbu Y
y_train[0]

#Menampilkan gambar
plt.imshow(X_train[0])

#Membentuk kembali data agar sesuai model
X_train = X_train.reshape(60000, 28,28,1)
X_test = X_test.reshape(10000, 28, 28, 1)

#Kolom target One-Hot Encode (Y-Data set): Konversi label menjadi 10 angka untuk dimasukkan ke dalam Neural Network
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#Print label baru
print(y_train_one_hot[0])

#Membangun model Convolutional Neural Networks 
model = Sequential()
#menambahkan lapisan model
model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1))) #Convolution untuk mengekstraksi fitur dari gambar input, dan membuat 64 saluran fitur yang berhubungan dengan ReLu 3x3 (Rectifier Linear Unit alias (ReLu))
model.add(Conv2D(32, kernel_size=3, activation='relu'))#Convolution Layer untuk mengekstraksi fitur dari gambar input, dan membuat 32 saluran fitur yang terhubung 3x3 ReLu
model.add(Flatten())#Meratakan layer membuat gambar array linier atau 1D Array atau 1D Vektor untuk masuk kedalam dan terhubung dengan Neural Network
model.add(Dense(10, activation='softmax'))#Lapisan terakhir Neural Network dengan 10 neuron dan fungsi aktivasi softmax, 10 neuron digunakan karena kami memiliki 10 label

#penyusunan pada Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#Melakukan Train pada model
#Batch: Total jumlah contoh Train dalam satu batch (None = default 32)
#Epoch:Jumlah iterasi ketika SELURUH dataset dilewatkan maju dan mundur hanya melalui Neural Network SEKALI.
#Fit: kata lain dari Train
hist = model.fit(X_train, y_train_one_hot, validation_data=(X_test, y_test_one_hot), epochs=3)

#Visualisasi keakurasian pada model
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

#Prediksi sebagai probabilitas untuk 4 gambar pertama dalam set 
predictions = model.predict(X_test[:4])
predictions

#Cetak prediksi sebagai label nomor untuk 4 gambar pertama
print( np.argmax(predictions, axis=1))
#Print model yang asli
print(y_test[:4])

#Menunjukkan 4 gambar hasil analisa
for i in range(0,4):
  image = X_test[i]
  image = np.array(image, dtype='float')
  pixels = image.reshape((28,28))
  plt.imshow(pixels, cmap='gray')
  plt.show()